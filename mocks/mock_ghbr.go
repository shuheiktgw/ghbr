// Code generated by MockGen. DO NOT EDIT.
// Source: github.go

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	github "github.com/google/go-github/github"
	reflect "reflect"
)

// MockGitHub is a mock of GitHub interface
type MockGitHub struct {
	ctrl     *gomock.Controller
	recorder *MockGitHubMockRecorder
}

// MockGitHubMockRecorder is the mock recorder for MockGitHub
type MockGitHubMockRecorder struct {
	mock *MockGitHub
}

// NewMockGitHub creates a new mock instance
func NewMockGitHub(ctrl *gomock.Controller) *MockGitHub {
	mock := &MockGitHub{ctrl: ctrl}
	mock.recorder = &MockGitHubMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockGitHub) EXPECT() *MockGitHubMockRecorder {
	return m.recorder
}

// GetLatestRelease mocks base method
func (m *MockGitHub) GetLatestRelease(repo string) (*github.RepositoryRelease, error) {
	ret := m.ctrl.Call(m, "GetLatestRelease", repo)
	ret0, _ := ret[0].(*github.RepositoryRelease)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLatestRelease indicates an expected call of GetLatestRelease
func (mr *MockGitHubMockRecorder) GetLatestRelease(repo interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatestRelease", reflect.TypeOf((*MockGitHub)(nil).GetLatestRelease), repo)
}

// CreateBranch mocks base method
func (m *MockGitHub) CreateBranch(repo, origin, new string) error {
	ret := m.ctrl.Call(m, "CreateBranch", repo, origin, new)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateBranch indicates an expected call of CreateBranch
func (mr *MockGitHubMockRecorder) CreateBranch(repo, origin, new interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBranch", reflect.TypeOf((*MockGitHub)(nil).CreateBranch), repo, origin, new)
}

// DeleteLatestRef mocks base method
func (m *MockGitHub) DeleteLatestRef(repo, branch string) error {
	ret := m.ctrl.Call(m, "DeleteLatestRef", repo, branch)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteLatestRef indicates an expected call of DeleteLatestRef
func (mr *MockGitHubMockRecorder) DeleteLatestRef(repo, branch interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLatestRef", reflect.TypeOf((*MockGitHub)(nil).DeleteLatestRef), repo, branch)
}

// CreatePullRequest mocks base method
func (m *MockGitHub) CreatePullRequest(repo, title, head, base, body string) (*github.PullRequest, error) {
	ret := m.ctrl.Call(m, "CreatePullRequest", repo, title, head, base, body)
	ret0, _ := ret[0].(*github.PullRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePullRequest indicates an expected call of CreatePullRequest
func (mr *MockGitHubMockRecorder) CreatePullRequest(repo, title, head, base, body interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePullRequest", reflect.TypeOf((*MockGitHub)(nil).CreatePullRequest), repo, title, head, base, body)
}

// MergePullRequest mocks base method
func (m *MockGitHub) MergePullRequest(repo string, number int) error {
	ret := m.ctrl.Call(m, "MergePullRequest", repo, number)
	ret0, _ := ret[0].(error)
	return ret0
}

// MergePullRequest indicates an expected call of MergePullRequest
func (mr *MockGitHubMockRecorder) MergePullRequest(repo, number interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MergePullRequest", reflect.TypeOf((*MockGitHub)(nil).MergePullRequest), repo, number)
}

// ClosePullRequest mocks base method
func (m *MockGitHub) ClosePullRequest(repo string, number int) error {
	ret := m.ctrl.Call(m, "ClosePullRequest", repo, number)
	ret0, _ := ret[0].(error)
	return ret0
}

// ClosePullRequest indicates an expected call of ClosePullRequest
func (mr *MockGitHubMockRecorder) ClosePullRequest(repo, number interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClosePullRequest", reflect.TypeOf((*MockGitHub)(nil).ClosePullRequest), repo, number)
}

// GetFile mocks base method
func (m *MockGitHub) GetFile(repo, branch, path string) (*github.RepositoryContent, error) {
	ret := m.ctrl.Call(m, "GetFile", repo, branch, path)
	ret0, _ := ret[0].(*github.RepositoryContent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFile indicates an expected call of GetFile
func (mr *MockGitHubMockRecorder) GetFile(repo, branch, path interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFile", reflect.TypeOf((*MockGitHub)(nil).GetFile), repo, branch, path)
}

// UpdateFile mocks base method
func (m *MockGitHub) UpdateFile(repo, branch, path, sha, message string, content []byte) error {
	ret := m.ctrl.Call(m, "UpdateFile", repo, branch, path, sha, message, content)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateFile indicates an expected call of UpdateFile
func (mr *MockGitHubMockRecorder) UpdateFile(repo, branch, path, sha, message, content interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFile", reflect.TypeOf((*MockGitHub)(nil).UpdateFile), repo, branch, path, sha, message, content)
}
