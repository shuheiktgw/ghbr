// Code generated by MockGen. DO NOT EDIT.
// Source: hbr/hbr.go

// Package hbr is a generated GoMock package.
package hbr

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockHBRWrapper is a mock of HBRWrapper interface
type MockHBRWrapper struct {
	ctrl     *gomock.Controller
	recorder *MockHBRWrapperMockRecorder
}

// MockHBRWrapperMockRecorder is the mock recorder for MockHBRWrapper
type MockHBRWrapperMockRecorder struct {
	mock *MockHBRWrapper
}

// NewMockHBRWrapper creates a new mock instance
func NewMockHBRWrapper(ctrl *gomock.Controller) *MockHBRWrapper {
	mock := &MockHBRWrapper{ctrl: ctrl}
	mock.recorder = &MockHBRWrapperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockHBRWrapper) EXPECT() *MockHBRWrapperMockRecorder {
	return m.recorder
}

// GetCurrentRelease mocks base method
func (m *MockHBRWrapper) GetCurrentRelease(repo string) *LatestRelease {
	ret := m.ctrl.Call(m, "GetCurrentRelease", repo)
	ret0, _ := ret[0].(*LatestRelease)
	return ret0
}

// GetCurrentRelease indicates an expected call of GetCurrentRelease
func (mr *MockHBRWrapperMockRecorder) GetCurrentRelease(repo interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrentRelease", reflect.TypeOf((*MockHBRWrapper)(nil).GetCurrentRelease), repo)
}

// CreateFormula mocks base method
func (m *MockHBRWrapper) CreateFormula(app, font string, private bool, release *LatestRelease) {
	m.ctrl.Call(m, "CreateFormula", app, font, private, release)
}

// CreateFormula indicates an expected call of CreateFormula
func (mr *MockHBRWrapperMockRecorder) CreateFormula(app, font, private, release interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFormula", reflect.TypeOf((*MockHBRWrapper)(nil).CreateFormula), app, font, private, release)
}

// UpdateFormula mocks base method
func (m *MockHBRWrapper) UpdateFormula(app, branch string, merge bool, release *LatestRelease) {
	m.ctrl.Call(m, "UpdateFormula", app, branch, merge, release)
}

// UpdateFormula indicates an expected call of UpdateFormula
func (mr *MockHBRWrapperMockRecorder) UpdateFormula(app, branch, merge, release interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFormula", reflect.TypeOf((*MockHBRWrapper)(nil).UpdateFormula), app, branch, merge, release)
}

// Err mocks base method
func (m *MockHBRWrapper) Err() error {
	ret := m.ctrl.Call(m, "Err")
	ret0, _ := ret[0].(error)
	return ret0
}

// Err indicates an expected call of Err
func (mr *MockHBRWrapperMockRecorder) Err() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Err", reflect.TypeOf((*MockHBRWrapper)(nil).Err))
}

// MockHBRClient is a mock of HBRClient interface
type MockHBRClient struct {
	ctrl     *gomock.Controller
	recorder *MockHBRClientMockRecorder
}

// MockHBRClientMockRecorder is the mock recorder for MockHBRClient
type MockHBRClientMockRecorder struct {
	mock *MockHBRClient
}

// NewMockHBRClient creates a new mock instance
func NewMockHBRClient(ctrl *gomock.Controller) *MockHBRClient {
	mock := &MockHBRClient{ctrl: ctrl}
	mock.recorder = &MockHBRClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockHBRClient) EXPECT() *MockHBRClientMockRecorder {
	return m.recorder
}

// GetCurrentRelease mocks base method
func (m *MockHBRClient) GetCurrentRelease(repo string) (*LatestRelease, error) {
	ret := m.ctrl.Call(m, "GetCurrentRelease", repo)
	ret0, _ := ret[0].(*LatestRelease)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCurrentRelease indicates an expected call of GetCurrentRelease
func (mr *MockHBRClientMockRecorder) GetCurrentRelease(repo interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrentRelease", reflect.TypeOf((*MockHBRClient)(nil).GetCurrentRelease), repo)
}

// CreateFormula mocks base method
func (m *MockHBRClient) CreateFormula(app, font string, private bool, release *LatestRelease) error {
	ret := m.ctrl.Call(m, "CreateFormula", app, font, private, release)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateFormula indicates an expected call of CreateFormula
func (mr *MockHBRClientMockRecorder) CreateFormula(app, font, private, release interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFormula", reflect.TypeOf((*MockHBRClient)(nil).CreateFormula), app, font, private, release)
}

// UpdateFormula mocks base method
func (m *MockHBRClient) UpdateFormula(app, branch string, merge bool, release *LatestRelease) error {
	ret := m.ctrl.Call(m, "UpdateFormula", app, branch, merge, release)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateFormula indicates an expected call of UpdateFormula
func (mr *MockHBRClientMockRecorder) UpdateFormula(app, branch, merge, release interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFormula", reflect.TypeOf((*MockHBRClient)(nil).UpdateFormula), app, branch, merge, release)
}
