// Code generated by MockGen. DO NOT EDIT.
// Source: hbr/hbr.go

// Package hbr is a generated GoMock package.
package hbr

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockGHBRWrapper is a mock of GHBRWrapper interface
type MockGHBRWrapper struct {
	ctrl     *gomock.Controller
	recorder *MockGHBRWrapperMockRecorder
}

// MockGHBRWrapperMockRecorder is the mock recorder for MockGHBRWrapper
type MockGHBRWrapperMockRecorder struct {
	mock *MockGHBRWrapper
}

// NewMockGHBRWrapper creates a new mock instance
func NewMockGHBRWrapper(ctrl *gomock.Controller) *MockGHBRWrapper {
	mock := &MockGHBRWrapper{ctrl: ctrl}
	mock.recorder = &MockGHBRWrapperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockGHBRWrapper) EXPECT() *MockGHBRWrapperMockRecorder {
	return m.recorder
}

// GetCurrentRelease mocks base method
func (m *MockGHBRWrapper) GetCurrentRelease(repo string) *LatestRelease {
	ret := m.ctrl.Call(m, "GetCurrentRelease", repo)
	ret0, _ := ret[0].(*LatestRelease)
	return ret0
}

// GetCurrentRelease indicates an expected call of GetCurrentRelease
func (mr *MockGHBRWrapperMockRecorder) GetCurrentRelease(repo interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrentRelease", reflect.TypeOf((*MockGHBRWrapper)(nil).GetCurrentRelease), repo)
}

// CreateFormula mocks base method
func (m *MockGHBRWrapper) CreateFormula(app, font string, private bool, release *LatestRelease) {
	m.ctrl.Call(m, "CreateFormula", app, font, private, release)
}

// CreateFormula indicates an expected call of CreateFormula
func (mr *MockGHBRWrapperMockRecorder) CreateFormula(app, font, private, release interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFormula", reflect.TypeOf((*MockGHBRWrapper)(nil).CreateFormula), app, font, private, release)
}

// UpdateFormula mocks base method
func (m *MockGHBRWrapper) UpdateFormula(app, branch string, merge bool, release *LatestRelease) {
	m.ctrl.Call(m, "UpdateFormula", app, branch, merge, release)
}

// UpdateFormula indicates an expected call of UpdateFormula
func (mr *MockGHBRWrapperMockRecorder) UpdateFormula(app, branch, merge, release interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFormula", reflect.TypeOf((*MockGHBRWrapper)(nil).UpdateFormula), app, branch, merge, release)
}

// Err mocks base method
func (m *MockGHBRWrapper) Err() error {
	ret := m.ctrl.Call(m, "Err")
	ret0, _ := ret[0].(error)
	return ret0
}

// Err indicates an expected call of Err
func (mr *MockGHBRWrapperMockRecorder) Err() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Err", reflect.TypeOf((*MockGHBRWrapper)(nil).Err))
}

// MockGHBRClient is a mock of GHBRClient interface
type MockGHBRClient struct {
	ctrl     *gomock.Controller
	recorder *MockGHBRClientMockRecorder
}

// MockGHBRClientMockRecorder is the mock recorder for MockGHBRClient
type MockGHBRClientMockRecorder struct {
	mock *MockGHBRClient
}

// NewMockGHBRClient creates a new mock instance
func NewMockGHBRClient(ctrl *gomock.Controller) *MockGHBRClient {
	mock := &MockGHBRClient{ctrl: ctrl}
	mock.recorder = &MockGHBRClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockGHBRClient) EXPECT() *MockGHBRClientMockRecorder {
	return m.recorder
}

// GetCurrentRelease mocks base method
func (m *MockGHBRClient) GetCurrentRelease(repo string) (*LatestRelease, error) {
	ret := m.ctrl.Call(m, "GetCurrentRelease", repo)
	ret0, _ := ret[0].(*LatestRelease)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCurrentRelease indicates an expected call of GetCurrentRelease
func (mr *MockGHBRClientMockRecorder) GetCurrentRelease(repo interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrentRelease", reflect.TypeOf((*MockGHBRClient)(nil).GetCurrentRelease), repo)
}

// CreateFormula mocks base method
func (m *MockGHBRClient) CreateFormula(app, font string, private bool, release *LatestRelease) error {
	ret := m.ctrl.Call(m, "CreateFormula", app, font, private, release)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateFormula indicates an expected call of CreateFormula
func (mr *MockGHBRClientMockRecorder) CreateFormula(app, font, private, release interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFormula", reflect.TypeOf((*MockGHBRClient)(nil).CreateFormula), app, font, private, release)
}

// UpdateFormula mocks base method
func (m *MockGHBRClient) UpdateFormula(app, branch string, merge bool, release *LatestRelease) error {
	ret := m.ctrl.Call(m, "UpdateFormula", app, branch, merge, release)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateFormula indicates an expected call of UpdateFormula
func (mr *MockGHBRClientMockRecorder) UpdateFormula(app, branch, merge, release interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFormula", reflect.TypeOf((*MockGHBRClient)(nil).UpdateFormula), app, branch, merge, release)
}
